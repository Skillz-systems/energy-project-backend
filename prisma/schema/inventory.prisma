model Inventory {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  manufacturerName String

  inventoryCategoryId String?   @unique @db.ObjectId
  inventoryCategory   Category? @relation(name: "InventoryToCategory", fields: [inventoryCategoryId], references: [id])

  inventorySubCategoryId String?   @unique @db.ObjectId
  inventorySubCategory   Category? @relation(name: "InventoryToSubCategory", fields: [inventorySubCategoryId], references: [id])

  batches InventoryBatch[] // Relation to batch records

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("inventories")
}

model InventoryBatch {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  dateOfManufacture String?
  sku               String?
  image             String?
  batchNumber       Int // Unique identifier for each batch of a product
  costOfItem        Float? // Price specific to this batch
  price             Float // Price specific to this batch
  numberOfStock     Int // Original quantity in this batch
  remainingQuantity Int // Current remaining quantity in this batch

  status InventoryStatus @default(IN_STOCK)
  class  InventoryClass

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products ProductInventoryBatch[]

  inventoryId String     @db.ObjectId
  inventory   Inventory? @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, batchNumber]) // Ensures batchNumber is unique within a product's inventory
  @@map("inventory_batches")
}

enum InventoryStatus {
  IN_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum InventoryClass {
  REGULAR
  RETURNED
  REFURBISHED
}
